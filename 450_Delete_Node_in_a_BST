# 450 Delete Node in a BST



# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None



class Solution(object):
    
    
    # can output the list of tree, useless here
    def pure_bfs(self, root):
        
        list_exp = [root.val]
        
        this_layer = [root]
        while True:
            will_append = []
            next_layer = []
            for t in this_layer:
                if t.left == None:
                    will_append.append(None)
                else:
                    next_layer.append(t.left)
                    will_append.append(t.left.val)
                if t.right == None:
                    will_append.append(None)
                else:
                    next_layer.append(t.right)
                    will_append.append(t.right.val)
                
            if will_append != len(will_append)*[None] :
                list_exp.extend(will_append)
            else:
                return list_exp

            this_layer = next_layer
        return list_exp


    def dfs_delete(self, node, key):
        
        if node != None:
            if node.val > key:
                node.left = self.dfs_delete(node.left, key)
            elif node.val < key:
                node.right = self.dfs_delete(node.right, key)
            elif node.val == key:
                # 1st only left
                if node.right == None:
                    return node.left
                
                # 2nd only right
                elif node.left == None:
                    return node.right
                
                # 3rd both
                elif node.right != None and node.left != None:
                    temp = node.left
                    prev = temp
                    while temp.right != None:
                        prev = temp
                        temp = temp.right
                    node.val = temp.val
                    node.left = self.dfs_delete(node.left, temp.val)
                    return node
            return node
            
        return None
            

    def deleteNode(self, root, key):
        """
        :type root: TreeNode
        :type key: int
        :rtype: TreeNode
        """
        
        root = self.dfs_delete(root, key)
        # print self.pure_bfs(root)
        return root
        
        
        
        
        
        